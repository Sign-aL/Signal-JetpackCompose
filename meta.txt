# Signal - ASL Translation Device

## Objective
Create a polished Android app that connects to a sign language glove which:
- Connects to an ESP32 glove device via Bluetooth Low Energy (BLE)
- Interprets one-handed ASL finger spelling from actual device readings
- Uses 5 flex sensors and a gy-91 mpu9050 module
- Integrates with Google's Vertex AI Gemini for processing translations
- Incorporates Gemma AI for health information summarization
- Translates sign language into full sentences
- Uses Text-to-Speech to speak translations
- Provides a modern, stylish UI with bottom navigation
- Stores and displays critical health information for healthcare settings

## Project Structure
- UI Components
  - MainActivity: Navigation host for the app with BLE permissions handling
  - IntroScreen: Animated splash screen showing app name and logo
  - HomeScreen: Display interpreted signs and AI translations with speech output
  - SensorVisualizationScreen: Visual representation of real sensor data from BLE device
  - SettingsScreen: Configure app settings, API key and accessibility options
  - ProfileScreen: Input and store personal health information for healthcare scenarios
- Core Features
  - BLE Connection: Connect to ESP32 device with proper service/characteristic UUIDs
  - ASL Interpretation: Map sensor data to ASL letters
  - Gemini AI Integration: Send interpreted signs to Gemini API for translation
  - Gemma AI Integration: Process health information for emergency scenarios
  - Text-to-Speech: Convert AI responses to speech
  - Bottom Navigation: Easy navigation between screens
  - Preferences Storage: Save user settings between sessions
  - Shared State Management: Maintain sign capture state between different screens
  - Health Profile: Store and display critical health information during healthcare interactions

## Technologies
- Android Jetpack Compose for UI
- Kotlin for app development
- Bluetooth Low Energy for device communication
- Vertex AI Gemini API for language translations
- Gemma AI for health information processing
- Android Text-to-Speech for voice output
- Material Design 3 for modern styling
- SharedPreferences for data persistence
- ViewModel for shared state between screens
- Coroutines for background processing and animations
- JSONObject for data serialization

## Current Status
- Basic app structure with Jetpack Compose ✅
- BLE connection to ESP32 device ✅
- Realistic sensor visualization from BLE data ✅
- ASL interpretation logic ✅
- Gemini AI integration with real API support ✅
- Gemma AI integration for health information processing ✅
- Text-to-Speech integration with preference toggle ✅
- Bottom navigation bar ✅
- Intro splash screen with animations ✅
- Enhanced UI with Material Design 3 styling ✅
- Settings persistence with SharedPreferences ✅
- Shared sign capture state between screens ✅
- Integrated sensor visualization with letter detection ✅
- Continuous sign capture across tab navigation ✅
- Dynamic sensor visualization with enhanced feedback ✅
- Fixed static sensor values to ensure continuous updates ✅
- Profile for storing patient information ✅
- Automatic health info display during healthcare interactions ✅
- Emergency condition response generation with Gemma AI ✅

## Implementation Details
1. IntroScreen: Polished animated splash screen showing the app name "Signal" with scaling icon and "Smart Sign Language Translation Device" subtitle
2. HomeScreen: Displays detected ASL signs with visual feedback, AI translations, and text-to-speech output
3. SensorVisualizationScreen: Shows real-time BLE sensor data with enhanced visual feedback and dynamic colors
4. SettingsScreen: Configures app settings including Gemini API key and accessibility options
5. ProfileScreen: Allows users to input and save personal health information for healthcare scenarios
6. BleConnectionManager: Manages BLE connection to ESP32 device with specific service UUID 6E400001-B5A3-F393-E0A9-E50E24DCCA9E and characteristic TX UUID 6E400003-B5A3-F393-E0A9-E50E24DCCA9E for notifications
7. SignCaptureViewModel: Handles BLE data processing and letter detection from the connected device
8. GeminiAiViewModel: Handles communication with Gemini AI for natural language translations with fallback to simulated responses
9. GemmaAiViewModel: Processes health data for summaries and emergency situation responses
10. TextToSpeechManager: Manages text-to-speech functionality for accessibility

## BLE Connection Features
- Device scanning with service UUID filtering
- Connection to ESP32 BLE device
- Subscription to notifications from TX characteristic
- Real-time sensor data updates
- Proper permission handling for Android BLE operations
- Smooth connection establishment and monitoring
- Automatic letter detection from BLE notifications

## ESP32 Device Configuration
The ESP32 device is configured with:
- Service UUID: 6E400001-B5A3-F393-E0A9-E50E24DCCA9E
- TX Characteristic: 6E400003-B5A3-F393-E0A9-E50E24DCCA9E (with NOTIFY property)
- Device name: "FakeGloveBLE"
- Sends letter notifications based on sensor readings
- When paired with the app, provides real-time ASL finger spelling recognition

## Future Improvements
- Improve BLE reconnection handling when connection is lost
- Implement calibration for different users' hand sizes
- Add more complex sign language interpretation beyond finger spelling
- Expand language options for text-to-speech
- Improve accuracy of AI translations
- Add vibration feedback when signs are detected
- Add ability to calibrate sensor simulation for different users
- Add ability to share health information with healthcare providers
- Implement data encryption for sensitive health information
- Add health ID QR code for quick scanning in emergencies

## Recent Changes
- Added BLE connectivity to connect to ESP32 device
- Implemented proper BLE permission handling in MainActivity
- Created BleConnectionManager to handle BLE scan, connect, and data reception
- Updated SignCaptureViewModel to process real BLE data
- Enhanced SensorVisualizationScreen UI to display actual sensor values
- Updated sensor visualization to show flex, accelerometer, and gyroscope data from device
- Added reconnection handling when connection is lost
- Modified AndroidManifest.xml to include all required BLE permissions
- Improved hand visualization to reflect real sensor data 